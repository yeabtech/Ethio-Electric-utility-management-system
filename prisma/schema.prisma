generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  clerkUserId       String                 @unique
  email             String                 @unique
  role              String
  isVerified        Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  technician        Technician?  
  verification      CustomerVerification[] @relation("UserVerifications")
  employeeInfo      EmployeeInfo?
  services          ServiceApplication[]
  receiptCustomers  Receipt[]              @relation("ReceiptCustomer")
  tasks             Task[]                 @relation("TaskCustomer")   // Added this
  assignedTasks     Task[]                 @relation("TaskAssigner")   // Added this
  
  // Report relations
  reportTemplates   ReportTemplate[]       // Templates created by user
  submittedReports  Report[]               @relation("SubmittedReports")
  assignedReports   Report[]               @relation("AssignedReports")
  reportComments    ReportComment[]
  reportAccess      ReportAccess[]
  // Messaging relations
  messagesSent      Message[]
  messagesReceived  MessageRecipient[]
}

model CustomerVerification {
  id              String   @id @default(cuid())
  userId          String
  firstName       String
  middleName      String?
  lastName        String
  gender          String
  dateOfBirth     DateTime
  mobileNumber    String
  idType          String
  idNumber        String
  region          String
  subCity         String
  woreda          String
  kebele          String
  homeNumber      String
  nationality     String
  personalPhoto   String
  idPhotoFront    String
  idPhotoBack     String?
  status          String   @default("NotVerified")
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation("UserVerifications", fields: [userId], references: [id])
}

model EmployeeInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  subCity   String
  woreda    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model ServiceApplication {
  id              String   @id @default(cuid())
  userId          String
  category        String
  serviceType     String
  status          String   @default("pending")
  documents       String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  metadata        Json?
  rejectionReason String?

  user            User     @relation(fields: [userId], references: [id])
  receipt         Receipt? @relation("ServiceReceipt")
  task             Task?
}

model ConnectionPricing {
  id             String  @id @default(cuid())
  connectionType String
  voltageLevel   String
  cost           Float

  @@unique([connectionType, voltageLevel])
}

model MeterPricing {
  id          String  @id @default(cuid())
  meterType   String  @unique
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VoltageRate {
  id      String  @id @default(cuid())
  voltage String  @unique
  rate    Float
}

model Receipt {
  id               String             @id @default(cuid())
  serviceId        String             @unique
  service          ServiceApplication @relation("ServiceReceipt", fields: [serviceId], references: [id])

  customerId       String
  customer         User               @relation("ReceiptCustomer", fields: [customerId], references: [id])

  connectionType   String
  voltageLevel     String
  baseCost         Float
  voltageRate      Float
  totalAmount      Float
  taxAmount        Float
  grandTotal       Float

  status           ReceiptStatus      @default(pending)

  // New fields for Chapa payment
  txRef            String?            @unique  // Unique transaction reference
  paid             Boolean            @default(false)
  paymentDate      DateTime?          // When payment was completed
  chapaRawResponse Json?              // Store raw Chapa webhook payload if needed
  task             Task?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Technician {
  id          String     @id @default(cuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  subCity     String     // Sub-city assignment
  woreda      String     // Woreda assignment
  skills      String[]   // e.g. ["installation", "repair", "maintenance"]
  status      TechnicianStatus @default(available) // available, assigned, on_leave
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tasks       Task[]
}

model Task {
  id           String     @id @default(cuid())
  technicianId String
  technician   Technician @relation(fields: [technicianId], references: [id])
  serviceId    String     @unique
  service      ServiceApplication @relation(fields: [serviceId], references: [id])
  receiptId    String     @unique
  receipt      Receipt    @relation(fields: [receiptId], references: [id])
  customerId   String
  customer     User       @relation("TaskCustomer",fields: [customerId], references: [id])
  assignedById String
  assignedBy   User       @relation("TaskAssigner",fields: [assignedById], references: [id])
  status       TaskStatus @default(assigned)
  scheduledAt  DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  reportId     String?    @unique
  report       Report?    @relation("TaskReport", fields: [reportId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum TechnicianStatus {
  available
  assigned
  on_leave
}

enum TaskStatus {
  assigned
  in_progress
  completed
  cancelled
}


enum ReceiptStatus {
  pending
  approved
  rejected
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum ServiceCategory {
  NEW_CONNECTIONS
  NETWORK_OPERATIONS
  METERING_BILLING
  CUSTOMER_SUPPORT
}

enum ServiceType {
  NEW_RESIDENTIAL
  COMMERCIAL_INDUSTRIAL
  TEMPORARY_POWER
  ACCESSIBILITY_INSTALL
  CAPACITY_CHANGE
  TRANSFORMER_REPAIR
  SUBSTATION_INSPECTION
  CABLE_REPAIR
  TREE_TRIMMING
  VOLTAGE_COMPLAINT
  EMERGENCY_REPAIR
  METER_MALFUNCTION
  METER_REPLACEMENT
  METER_READING
  BILL_DISPUTE
  PAYMENT_EXTENSION
  DUPLICATE_BILL
  OUTAGE_REPORT
  VOLTAGE_FLUCTUATION
  GENERAL_COMPLAINT
  REQUEST_TRACKING
  SERVICE_ESCALATION
  INFO_UPDATE
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===== CORE REPORT TABLES =====
model ReportTemplate {
  id          String         @id @default(cuid())
  title       String
  description String?
  category    ReportCategory
  fields      Json           // Schema for dynamic form fields
  createdBy   String
  creator     User           @relation(fields: [createdBy], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  reports     Report[]
  accessRoles ReportAccess[] // Controls who can view/submit
}

model Report {
  id           String         @id @default(cuid())
  templateId   String
  template     ReportTemplate @relation(fields: [templateId], references: [id])
  submittedById String        // Original submitter
  submittedBy  User           @relation("SubmittedReports", fields: [submittedById], references: [id])
  assignedToId String?        // Primary reviewer (usually manager)
  assignedTo   User?          @relation("AssignedReports", fields: [assignedToId], references: [id])
  status       ReportStatus   @default(draft)
  priority     ReportPriority @default(medium)
  dueDate      DateTime?
  submittedAt  DateTime?
  completedAt  DateTime?
  data         ReportData[]
  comments     ReportComment[]
  attachments  ReportAttachment[]
  sharedWith   ReportAccess[] // Explicit CSO/manager access
  task         Task?          @relation("TaskReport")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([submittedById, status])
  @@index([assignedToId, status])
}

model ReportData {
  id         String   @id @default(cuid())
  reportId   String
  report     Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  fieldName  String   // e.g. "progress_update"
  fieldValue String   // Flexible data storage
  createdAt  DateTime @default(now())
}

model ReportComment {
  id        String   @id @default(cuid())
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model ReportAttachment {
  id        String   @id @default(cuid())
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
  url       String   // Storage path
  name      String
  type      String   // e.g. "image/png"
  size      Int      // Bytes
  createdAt DateTime @default(now())
}

// ===== ACCESS CONTROL =====
model ReportAccess {
  id         String   @id @default(cuid())
  reportId   String?
  report     Report?  @relation(fields: [reportId], references: [id])
  templateId String?
  template   ReportTemplate? @relation(fields: [templateId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  role       String   // "viewer" | "editor" | "approver"
  createdAt  DateTime @default(now())

  @@unique([reportId, userId])
  @@unique([templateId, userId])
}

// ===== ENUMS =====
enum ReportStatus {
  draft
  submitted
  in_review
  approved
  rejected
  completed
  archived
}

enum ReportPriority {
  low
  medium
  high
  critical
}

enum ReportCategory {
  daily
  project
  technical
  customer
  financial
  inventory
  hr
  other
}

// ===== EMPLOYEE COMMUNICATION (MESSAGING) =====
model Message {
  id          String             @id @default(cuid())
  senderId    String
  sender      User               @relation(fields: [senderId], references: [id])
  subject     String?
  content     String
  sentAt      DateTime           @default(now())
  attachments MessageAttachment[]
  recipients  MessageRecipient[]
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id])
  url        String   // File storage path
  name       String
  type       String   // e.g. "application/pdf"
  size       Int      // Bytes
  uploadedAt DateTime @default(now())
}

model MessageRecipient {
  id          String   @id @default(cuid())
  messageId   String
  message     Message  @relation(fields: [messageId], references: [id])
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id])
  read        Boolean  @default(false)
  readAt      DateTime?
}
